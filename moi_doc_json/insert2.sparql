delete 
{?uid rdf:type mig:DashVisualContainer .} where 
{?uid rdf:type mig:DashVisualContainer .};

insert{?iri rdf:type mig:DashConfFile}
where {
            ?iri rdf:type js:FileJson .
            ?iri etl:hasSourceFile ?file .  
			filter (regex(?file,'-conf.json','i') )  
            };
insert{
?uid rdf:type mig:DashVisualContainer .
?iri mig:hasVisualContainer ?uid .
} where 
{
select ?iri ?file (iri(concat('http://www.example.com/JSON#',replace(?file,'-conf.json',''))) as ?uid) 
            {            
            ?iri rdf:type js:FileJson .
            optional{?iri rdfs:label ?label } .
            ?iri etl:hasSourceFile ?file .  
			filter (regex(?file,'-conf.json','i') )  
            }
};


insert{
  ?containers js:parentVisualId ?section.  
  ?container js:parentVisualId ?containers .    
  ?containers rdfs:label 'visualContainers' .
}
where 
 {
    
  ?section rdf:type mig:DashSection .
  ?containers js:parentJsonId  ?section.  
  ?containers js:hasJsonObjectKey 'visualContainers' . 
  ?container  js:parentJsonId ?containers .   
  ?container rdf:type mig:DashVisualContainer .
};

insert {?container mig:hasDasVisualType ?visualType . 
        ?container mig:hasDasVisualName ?objName . 
        ?container rdfs:label ?label .} 
      where 
      {
select distinct ?container (xsd:integer(?conJsonObjectKey) as ?c_key) ?config ?visualType ?objName (?objName + ' : ' + ?visualType as ?label )
where 
 {    
  #bind (js:N913671cb453b4b66804070ba7a178288 as ?l1 )  .
  ?section rdf:type mig:DashSection.
  ?containers js:parentJsonId  ?section.
  ?containers js:hasJsonObjectKey 'visualContainers' .
  ?container js:parentJsonId ?containers .
  ?container rdf:type mig:DashVisualContainer .
  ?container js:hasJsonObjectKey ?conJsonObjectKey .
  ?config mig:hasVisualContainer  ?container.
  ?config rdf:type mig:DashConfFile  .
  ?l1 js:parentJsonId  ?config .
  ?l1 js:hasJsonObjectKey 'singleVisual' .
  optional {?l1 js:visualType  ?visualType }
  ?l2 js:parentJsonId  ?l1 .
  #?l2 js:hasJsonObjectKey 'objects' .
  ?l3 js:parentJsonId  ?l1 .
  ?l3 js:hasJsonObjectKey  'vcObjects' .
  ?l4 js:parentJsonId  ?l3 .
  ?l4 js:hasJsonObjectKey  'title' .
  ?l5 js:parentJsonId  ?l4 .
  ?l6 js:parentJsonId  ?l5 .
  ?l6 js:hasJsonObjectKey  'properties' .  
  ?l7 js:parentJsonId  ?l6 .
  ?l7 js:hasJsonObjectKey 'text' .
  ?l8 js:parentJsonId  ?l7 .
  ?l8 js:hasJsonObjectKey 'expr' .
  ?l9 js:parentJsonId  ?l8 .
  ?l9 js:hasJsonObjectKey 'Literal' .
  ?l9 js:Value ?objName .
}
};

insert {
?expr mig:hasMsDashTable ?table .
?expr rdf:type  mig:DashExpression . 
?table mig:sourceString ?jsstring . 
} where 
#select  ?table ?tabname ?expr ?jsstring
{?table rdf:type mig:msDashTable.
 ?part js:parentJsonId  ?table .
 ?table js:name ?tabname . 
 ?part js:hasJsonObjectKey "partitions" .
 ?itempart  js:parentJsonId ?part.  
 ?itempart js:hasJsonObjectKey ?keyitem .
 ?source  js:parentJsonId ?itempart.  
 ?source js:hasJsonObjectKey "source" .  
 ?expr  js:parentJsonId ?source.   
 ?expr js:hasJsonObjectKey "expression" .
 ?expr  js:jsstring ?jsstring.
  filter ( regex(?jsstring,'Schema') && regex(?jsstring,'Item') )
};

insert {
?expr mig:hasMsDashTable ?table .
?expr rdf:type  mig:DashExpression . 
} where 
{?table rdf:type mig:msDashTable.
 ?part js:parentJsonId  ?table .
 ?table js:name ?tabname . 
 ?part js:hasJsonObjectKey "partitions" .
 ?itempart  js:parentJsonId ?part.  
 ?itempart js:hasJsonObjectKey ?keyitem .
 ?source  js:parentJsonId ?itempart.  
 ?source js:hasJsonObjectKey "source" .  
 ?expr  js:parentJsonId ?source.   
 ?expr js:hasJsonObjectKey "expression" .
 ?expr  js:jsstring ?jsstring.
};
insert {
  ?col mig:hasSqlName ?column_init.
  ?col mig:hasExpression ?expr .
} where 
{
?iri rdf:type mig:dashrenamedcolumn .  
?iri mig:column_init ?column_init .
?iri mig:column_renamed   ?column_renamed .
?iri mig:hasExpression ?expr .
?expr mig:hasMsDashTable ?table .
?col mig:hasMsDashTable ?table  .
?col rdf:type mig:DashColumn  . 
?col js:name ?column_renamed .  
?col js:name ?coljsname .  
};

insert {
  ?col mig:hasSqlName ?jsname .
}

where {
  ?col rdf:type mig:DashColumn  . 
  ?col js:name ?jsname .
  optional {?col mig:hasSqlName ?sqlName}
  filter ( coalesce(?sqlName,'')='')
};

insert {
  ?tableTo mig:hasRelationFrom ?tableFrom.
  ?tableFrom mig:hasRelationshipFrom ?relat.
  ?tableTo mig:hasRelationshipTo ?relat.
  ?columTo mig:hasRelationshipColumnTo  ?relat .
  ?columFrom mig:hasRelationshipColumnFrom  ?relat .
} where 
{
 ?iri rdf:type mig:msdash  .
 ?ch1 js:parentJsonId ?iri   .
 ?ch1  js:hasJsonObjectKey 'model' .
 ?relats js:parentJsonId ?ch1 . 
 ?relats js:hasJsonObjectKey "relationships" .
 ?relat js:parentJsonId  ?relats.
 ?relat js:fromTable  ?fromTable .
 ?relat js:toTable  ?toTable .  
 ?relat js:toColumn  ?toColumn .    
 ?relat js:fromColumn  ?fromColumn .      
 ?tableFrom  rdf:type mig:msDashTable .
 ?tableFrom js:name ?fromTable  .
 ?tableTo  rdf:type mig:msDashTable .
 ?tableTo js:name ?toTable  .  
 ?columFrom rdf:type mig:DashColumn .
 ?columFrom mig:hasMsDashTable ?tableFrom .
 ?columFrom js:name  ?fromColumn .

 ?columTo rdf:type mig:DashColumn .
 ?columTo mig:hasMsDashTable ?tableTo .
 ?columTo js:name  ?toColumn .

}  
;
