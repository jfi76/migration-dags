delete 
{?uid rdf:type mig:DashVisualContainer .} where 
{?uid rdf:type mig:DashVisualContainer .};

insert{?iri rdf:type mig:DashConfFile}
where {
            ?iri rdf:type js:FileJson .
            ?iri etl:hasSourceFile ?file .  
			filter (regex(?file,'-conf.json','i') )  
            };
insert{
?uid rdf:type mig:DashVisualContainer .
?iri mig:hasVisualContainer ?uid .
} where 
{
select ?iri ?file (iri(concat('http://www.example.com/JSON#',replace(?file,'-c-conf.json',''))) as ?uid) 
            {            
            ?iri rdf:type js:FileJson .
            optional{?iri rdfs:label ?label } .
            ?iri etl:hasSourceFile ?file .  
			filter (regex(?file,'-c-conf.json','i') )  
            }
};

insert{
?uid rdf:type mig:DashSection .
?iri mig:hasDashSection ?uid .
} where 
{
select ?iri ?file (iri(concat('http://www.example.com/JSON#',replace(?file,'-s-conf.json',''))) as ?uid) 
            {            
            ?iri rdf:type js:FileJson .
            optional{?iri rdfs:label ?label } .
            ?iri etl:hasSourceFile ?file .  
			filter (regex(?file,'-s-conf.json','i') )  
            }
};


insert{
  ?containers js:parentVisualId ?section.  
  ?container js:parentVisualId ?containers .    
  ?containers rdfs:label 'visualContainers' .
}
where 
 {
    
  ?section rdf:type mig:DashSection .
  ?containers js:parentJsonId  ?section.  
  ?containers js:hasJsonObjectKey 'visualContainers' . 
  ?container  js:parentJsonId ?containers .   
  ?container rdf:type mig:DashVisualContainer .
};

insert {?container mig:hasDasVisualType ?visualType . 
        ?container mig:hasDasVisualName ?objName . 
        ?container rdfs:label ?label . 
        ?container mig:hasSection ?section .
        } 
      where 
      {
select distinct ?container (xsd:integer(?conJsonObjectKey) as ?c_key) ?config ?visualType ?objName (?objName + ' : ' + ?visualType as ?label )
where 
 {    
  #bind (js:N913671cb453b4b66804070ba7a178288 as ?l1 )  .
  ?section rdf:type mig:DashSection.
  ?containers js:parentJsonId  ?section.
  ?containers js:hasJsonObjectKey 'visualContainers' .
  ?container js:parentJsonId ?containers .
  ?container rdf:type mig:DashVisualContainer .
  ?container js:hasJsonObjectKey ?conJsonObjectKey .
  ?config mig:hasVisualContainer  ?container.
  ?config rdf:type mig:DashConfFile  .
  ?l1 js:parentJsonId  ?config .
  ?l1 js:hasJsonObjectKey 'singleVisual' .
  optional {?l1 js:visualType  ?visualType }
  ?l2 js:parentJsonId  ?l1 .
  #?l2 js:hasJsonObjectKey 'objects' .
  ?l3 js:parentJsonId  ?l1 .
  ?l3 js:hasJsonObjectKey  'vcObjects' .
  ?l4 js:parentJsonId  ?l3 .
  ?l4 js:hasJsonObjectKey  'title' .
  ?l5 js:parentJsonId  ?l4 .
  ?l6 js:parentJsonId  ?l5 .
  ?l6 js:hasJsonObjectKey  'properties' .  
  ?l7 js:parentJsonId  ?l6 .
  ?l7 js:hasJsonObjectKey 'text' .
  ?l8 js:parentJsonId  ?l7 .
  ?l8 js:hasJsonObjectKey 'expr' .
  ?l9 js:parentJsonId  ?l8 .
  ?l9 js:hasJsonObjectKey 'Literal' .
  ?l9 js:Value ?objNamestr .
  bind (replace(?objNamestr,"'","") as ?objName) 
  filter (?visualType !='slicer')
}
};
insert {?container mig:hasDasVisualType ?visualType . 
        ?container mig:hasDasVisualName ?objName . 
        ?container rdfs:label ?label . 
        ?container mig:hasSection ?section .
        } 
      where 
      {
select distinct ?container (xsd:integer(?conJsonObjectKey) as ?c_key) ?config ?visualType ?objName (?objName + ' : ' + ?visualType as ?label ) 
where 
 {    
#  bind (js:Nf0b73f07d8ca472cb2a2e9fd6849d53d as ?container)  .
  ?section rdf:type mig:DashSection.
  ?containers js:parentJsonId  ?section.
  ?containers js:hasJsonObjectKey 'visualContainers' .
  ?container js:parentJsonId ?containers .
  ?container rdf:type mig:DashVisualContainer .
  ?container js:hasJsonObjectKey ?conJsonObjectKey .
  ?config mig:hasVisualContainer  ?container.
  ?config rdf:type mig:DashConfFile  .
  ?l1 js:parentJsonId  ?config .
  ?l1 js:hasJsonObjectKey 'singleVisual' .
    bind('slicer' as ?visualType)  
  ?l1 js:visualType  ?visualType .
 
  ?iri js:parentJsonId* ?l1 .
  ?iri  js:hasJsonObjectKey 'header' .
  ?p1 js:parentJsonId ?iri .
  ?p2  js:parentJsonId ?p1 .
  ?p2 js:hasJsonObjectKey 'properties'  .
  ?p3 js:parentJsonId ?p2 .
  ?p3 js:hasJsonObjectKey 'text'.
  ?p4 js:parentJsonId ?p3 .
  ?p4 js:hasJsonObjectKey 'expr' . 
  ?p5 js:parentJsonId ?p4 . 
  ?p5 js:Value ?objNamestr .
    bind (replace(?objNamestr,"'","") as ?objName)    
  
    
 }
};

insert {
?expr mig:hasMsDashTable ?table .
?expr rdf:type  mig:DashExpression . 
?table mig:sourceString ?jsstring . 
?expr js:jsstring ?jsstring .
} where 

{?table rdf:type mig:msDashTable.
 ?part js:parentJsonId  ?table .
 ?table js:name ?tabname . 
 ?part js:hasJsonObjectKey "partitions" .
 ?itempart  js:parentJsonId ?part.  
 ?itempart js:hasJsonObjectKey ?keyitem .
 ?expr  js:parentJsonId ?itempart.  
 ?expr js:hasJsonObjectKey "source" .  
 ?expr  js:expression ?jsstring.
};


insert {
?expr mig:hasMsDashTable ?table .
?expr rdf:type  mig:DashExpression . 
?table mig:sourceString ?jsstring . 
?expr js:jsstring ?jsstring .
} where 

{?table rdf:type mig:msDashTable.
 ?part js:parentJsonId  ?table .
 ?table js:name ?tabname . 
 ?part js:hasJsonObjectKey "partitions" .
 ?itempart  js:parentJsonId ?part.  
 ?itempart js:hasJsonObjectKey ?keyitem .
 ?expr  js:parentJsonId ?itempart.  
 ?expr js:hasJsonObjectKey "source" .  
# ?expr  js:parentJsonId ?source.   
 #?source js:hasJsonObjectKey "expression" .
 ?expr  js:expression ?jsstring.
 filter ( regex(?jsstring,'Date','i')=false && regex(?jsstring,'Local','i')=false  )
 #filter (?tabname ='reports duk_rad_ouzp_attr_data_distinct')     
};

insert {
?expr mig:hasMsDashTable ?table .
?expr rdf:type  mig:DashExpression . 
} where 
{?table rdf:type mig:msDashTable.
 ?part js:parentJsonId  ?table .
 ?table js:name ?tabname . 
 ?part js:hasJsonObjectKey "partitions" .
 ?itempart  js:parentJsonId ?part.  
 ?itempart js:hasJsonObjectKey ?keyitem .
 ?source  js:parentJsonId ?itempart.  
 ?source js:hasJsonObjectKey "source" .  
 ?expr  js:parentJsonId ?source.   
 ?expr js:hasJsonObjectKey "expression" .
 ?expr  js:jsstring ?jsstring.
};

